5.安裝MariaDB

工作列表
=========================================================================================================================
5.1 安裝MariaDB並設定為開機後自動啟動的服務
5.2 常用的MariaDB管理指令
5.3 安裝PhpMyAdmin並設定開機後自動運行於127.0.0.1:9080

=========================================================================================================================
5.1 安裝MariaDB並設定為開機後自動啟動的服務
=========================================================================================================================
參考資料
http://www.linuxfromscratch.org/blfs/view/svn/server/mariadb.html
http://stackoverflow.com/questions/25244606/completely-remove-mysql-ubuntu-14-04-lts
https://cmake.org/install/

注意事項
-------------------------------------------------------------------------------------------------------------------------------
編譯時1G的RAM不夠使用，會跳出這裡討論的Error Messages
https://github.com/cloudfoundry/cf-mysql-release/issues/62
解決方法是使用swapfile補足硬體RAM不足的部分，swap space我加到了3500MB
然後也調整了/etc/sysctl.conf設定檔裡的vm.swappiness=0
把它改成vm.swappiness=50
-------------------------------------------------------------------------------------------------------------------------------

移除mysql-common、mysql-server、mysql-client
因為會和MariaDB衝突，移除這三個套件之後
如果/etc/mysql還活著，就手動砍掉它

移除指令是
# dpkg --get-selections | grep -v deinstall | grep mysql
# apt-get remove --purge mysql-server mysql-client mysql-common
# apt-get autoremove
# apt-get autoclean
# rm -rf /etc/mysql/

新增mysql用戶和群組
# groupadd -g 400 mysql
# useradd -c "MySQL Server" -d /srv/mysql -g mysql -s /bin/false -u 400 mysql

安裝依賴函式庫
# apt-get install libncurses5-dev bison libevent-dev

安裝CMake
# cd /usr/local/src
# wget https://cmake.org/files/v3.3/cmake-3.3.2.tar.gz
# tar -zxvf ./cmake-3.3.2.tar.gz
# chown -R root:root ./cmake-3.3.2
# cd ./cmake-3.3.2
# ./bootstrap
# make
# ln -s /usr/local/src/cmake-3.3.2/bin/cmake /usr/local/sbin/cmake
# ln -s /usr/local/src/cmake-3.3.2/bin/ctest /usr/local/sbin/ctest
# ln -s /usr/local/src/cmake-3.3.2/bin/cpack /usr/local/sbin/cpack

下載源碼tar.gz包
# cd /usr/local/src
# wget https://downloads.mariadb.org/interstitial/mariadb-10.0.21/source/mariadb-10.0.21.tar.gz

使用md5sum檢查下載的tar.gz檔案是否有被竄改？
# md5sum ./mariadb-10.0.21.tar.gz

終端機打印了
956561f3798d1fe8dfbe4b665287a87a  ./mariadb-10.0.21.tar.gz
MariaDB官網下載頁
https://downloads.mariadb.org/mariadb/10.0.21/
揭示的956561f3798d1fe8dfbe4b665287a87a
是一致的，所以這個tar.gz檔案是安全的，沒有被竄改

解開它，變更目錄權限值，並進入該目錄
# tar -zxvf ./mariadb-10.0.21.tar.gz
# chown -R root:root ./mariadb-10.0.21
# cd ./mariadb-10.0.21

修正 sql/CMakeLists.txt
# sed -i "s@data/test@\${INSTALL_MYSQLTESTDIR}@g" sql/CMakeLists.txt

編譯、測試、安裝
# cmake -DCMAKE_BUILD_TYPE=Release \
> -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb-10.0.21 \
> -DINSTALL_DOCDIR=share/doc/mariadb-10.0.21 \
> -DINSTALL_DOCREADMEDIR=share/doc/mariadb-10.0.21 \
> -DINSTALL_MANDIR=share/man \
> -DINSTALL_MYSQLSHAREDIR=share/mysql \
> -DINSTALL_MYSQLTESTDIR=share/mysql/test \
> -DINSTALL_PLUGINDIR=lib/mysql/plugin \
> -DINSTALL_SBINDIR=sbin \
> -DINSTALL_SCRIPTDIR=bin \
> -DINSTALL_SQLBENCHDIR=share/mysql/bench \
> -DINSTALL_SUPPORTFILESDIR=share/mysql \
> -DMYSQL_DATADIR=/srv/mysql \
> -DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock \
> -DWITH_EXTRA_CHARSETS=complex \
> -DWITH_EMBEDDED_SERVER=ON \
> -DTOKUDB_OK=0
# make
# make test
# make install

安裝完成，作個Symbolic Link
# cd /usr/local
# chmod -R g+w ./mariadb-10.0.21/
# chown -R mysql:mysql ./mariadb-10.0.21/
# ln -s /usr/local/mariadb-10.0.21 /usr/local/mariadb

接下來產生/etc/my.cnf設定檔
並設定一下擁有人、群組及權限
# touch /etc/my.cnf
# chown root:root /etc/my.cnf
# chmod 644 /etc/my.cnf
# vi /etc/my.cnf

/etc/my.cnf的內容請參考這裡
https://github.com/annbigbig/rose_memo/tree/master/conf/mariadb-10.0.21/etc/my.cnf

存檔之後按Esc鍵:wq離開vi文字編輯器
接下來我們要為MariaDB產生系統資料庫
# cd /usr/local/mariadb/bin/
# ./mysql_install_db --basedir=/usr/local/mariadb --datadir=/srv/mysql --user=mysql

實際的終端機輸出貼在這裡
https://github.com/annbigbig/rose_memo/tree/master/output/mariadb-10.0.21/mysql_install_db.txt

看一下剛才產生的/srv/mysql目錄
# cd /srv/mysql
# ls -al

現在可以準備啟動MariaDB了
先啟動，待會兒才可以執行mysql_secure_installation腳本
首先把init script拷貝到/etc/init.d並設定一下擁有人、群組及權限值
# cd /usr/local/src/mariadb-10.0.21/support-files/
# cp ./mysql.server /etc/init.d/mysql
# cd /etc/init.d
# chmod 755 /etc/init.d/mysql
# chown root:root /etc/init.d/mysql


第一次啟動MariaDB，很緊張
# service mysql status
# service mysql start
# service mysql status

檢查一下是否mysql服務運行於127.0.0.1的3306端口？
# netstat -anp|grep mysql

如果看到終端機這樣的訊息，就是啟動成功了
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      5688/mysqld     
unix  2      [ ACC ]     STREAM     LISTENING     18822    5688/mysqld         /run/mysqld/mysqld.sock

啟動之後，可以看一下log檔裡面有沒有什麼奇怪的錯誤訊息？
你可以用這兩個指令檢查一下你的MariaDB服務器的log檔
# cat /srv/mysql/error.log
# cat /srv/mysql/general.log

接下來我們要執行一次mysql_secure_installation
這個腳本會為我們設定root密碼，移除掉test資料庫和anonymous用戶
讓我們的MariaDB服務器更安全
# cd /usr/local/mariadb/bin
# ./mysql_secure_installation

執行mysql_secure_installation腳本時
終端機會問你一些問題，如果你懶得看，全部都回答y
我是有看一下他問什麼啦，看一下比較好，終端機輸出的訊息在這裡：
https://github.com/annbigbig/rose_memo/tree/master/output/mariadb-10.0.21/mysql_secure_installation.txt

為了要執行mysql的command line client（命令列用戶端）
我們要先把/usr/local/mariadb/bin這個目錄加到環境變數PATH裡
# cd /etc/profile.d
# touch ./add_mariadb_binary_path.sh
# chmod 644 ./add_mariadb_binary_path.sh
# chown root:root ./add_mariadb_binary_path.sh
# echo 'export PATH=$PATH:/usr/local/mariadb/bin' >> ./add_mariadb_binary_path.sh

看一下現在PATH環境變數的值
# echo $PATH

終端機回答了
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

執行source指令，一次性更新PATH環境變數
# source /etc/profile.d/add_mariadb_binary_path.sh

看一下現在PATH環境變數的值
# echo $PATH

終端機回答了
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/mariadb/bin
可以發現/usr/local/mariadb/bin這個路徑被添加到PATH環境變數裡
重新開機之後，再查看PATH環境變數也會得到上面的結果

詢問一下系統現在mysql指令(這是mysql command line client，命令列用戶端程式)的完整路徑
# which mysql

終端機回答了
/usr/local/mariadb/bin/mysql

現在要把MariaDB設定成開機後自動啟動的服務
# update-rc.d mysql defaults

如果想要取消MariaDB的開機後自動啟動的服務，就執行
# update-rc.d mysql disable

再次打開MariaDB的開機後自動啟動的服務，請執行
# update-rc.d mysql enable

重新開機
# reboot

然後查看mysql是否在開機後有自動啟動
# netstat -anp|grep mysql

如果有，可以使用這個指令來取得MariaDB提示符
(按下Enter後輸入MariaDB的root用戶密碼)
# mysql -h localhost --port 3306 -u root -p

=========================================================================================================================
5.2 常用的MariaDB管理指令
=========================================================================================================================
以下#開頭為bash shell下root用戶執行的指令
>開頭為MariaDB提示符執行的指令

查看mysqld運行狀態
# /etc/init.d/mysql status
# service mysql status
# netstat -anp|grep mysql
# ps aux |grep mysql

啟動、重啟、停止、重載mysqld、設定檔語法測試
可以這樣
# service mysql start
# service mysql restart
# service mysql stop
# service mysql reload
# service mysql configtest

或是這樣
# /etc/init.d/mysql start
# /etc/init.d/mysql restart
# /etc/init.d/mysql stop
# /etc/init.d/mysql reload
# /etc/init.d/mysql configtest

查看log檔
# cat /srv/mysql/error.log
# cat /srv/mysql/general.log

進入MariaDB[(none)]>提示符，使用MariaDB的root用戶登入服務器
# mysql -h localhost --port 3306 -u root -p

列出目前所有資料庫用戶名稱
> SHOW DATABASES;
> USE mysql;
> SHOW TABLES;
> DESCRIBE user;
> SELECT User,Host,Password FROM user;

查看某一位用戶的權限 (這裡假設是root用戶)
> SHOW GRANTS FOR 'root'@'localhost';
> SHOW GRANTS FOR 'root'@'127.0.0.1';
> SHOW GRANTS FOR 'root'@'::1';

新增用戶並同時設定密碼
> CREATE USER 'tony'@'localhost' IDENTIFIED BY 'tonypassword';
> CREATE USER 'tony'@'127.0.0.1' IDENTIFIED BY 'tonypassword';
> CREATE USER 'spiderman'@'%' IDENTIFIED BY 'spidermanpassword';
> CREATE USER 'hulk'@'10.1.1.90' IDENTIFIED BY 'hulkpassword';
> CREATE USER 'rogers'@'10.1.1.%' IDENTIFIED BY 'rogerspassword';
> CREATE USER 'thor'@'10.1.1.0/255.255.255.0' IDENTIFIED BY 'thorpassword';
> CREATE USER 'romanoff'@'host1.example.net' IDENTIFIED BY 'romanoffpassword';

給予權限 (注意用戶tony會變成超級使用者，有root那麼大的權限 *.* 表示所有資料庫裡的所有資料表)
> GRANT ALL ON *.* TO 'tony'@'localhost' WITH GRANT OPTION;
> GRANT ALL ON *.* TO 'tony'@'127.0.0.1' WITH GRANT OPTION;
> GRANT SELECT,INSERT,UPDATE,DELETE ON testdb1.* TO 'hulk'@'10.1.1.90';
> GRANT ALL ON testdb2.* TO 'rogers'@'10.1.1.%';
> GRANT SELECT ON testdb3.* TO 'thor'@'10.1.1.0/255.255.255.0' WITH GRANT OPTION;
> flush privileges;

收回權限
> REVOKE SELECT,GRANT OPTION ON testdb3.* FROM 'thor'@'10.1.1.0/255.255.255.0';
> REVOKE ALL ON testdb2.* FROM 'rogers'@'10.1.1.%';
> REVOKE SELECT,INSERT,UPDATE,DELETE ON testdb1.* FROM 'hulk'@'10.1.1.90';
> FLUSH PRIVILEGES;

刪除用戶
> DROP USER 'spiderman'@'%';
> DROP USER 'romanoff'@'host1.example.net';

變更用戶密碼 (一般用戶rogers)
> SET PASSWORD FOR 'rogers'@'10.1.1.%' = PASSWORD('captainpassword');

變更用戶密碼 (超級使用者tony)
> USE mysql;
> UPDATE user set Password=PASSWORD("starkpassword") where User='tony';
> FLUSH PRIVILEGES;

變更用戶密碼 (最高使用者root)
> USE mysql;
> UPDATE user set Password=PASSWORD("rootpassword") where User='root';
> FLUSH PRIVILEGES;
(注意：換密碼後一定要執行一次FLUSH PRIVILEGES;不然新密碼不會生效)

列出所有資料庫名稱
> SHOW DATABASES;

新增資料庫
> CREATE DATABASE testdb1;
> CREATE DATABASE IF NOT EXISTS testdb2;
> CREATE DATABASE testdb3;

刪除資料庫
> DROP DATABASE testdb2;
> DROP DATABASE IF EXISTS testdb3;

選定一個資料庫 (選定mysql資料庫)
> USE mysql;

列出目前選定資料庫內所有資料表名稱
> SHOW TABLES;

查看資料表結構 (查看user表的結構)
> DESCRIBE user;

在資料庫testdb1裡新增一個employees資料表
> USE testdb1;
> CREATE TABLE employees (
    -> id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> surname VARCHAR(100),
    -> givenname VARCHAR(100),
    -> pref_name VARCHAR(50),
    -> birthday DATE
    -> );
> SHOW TABLES;

查看生成這個表的CREATE TABLE敘述
> SHOW CREATE TABLE employees\G

刪除資料庫testdb1裡的employees資料表
> USE testdb1;
> SHOW TABLES;
> DROP TABLE employees;
> SHOW TABLES;

檢查資料表，若有問題則嘗試自動修復 (可自行查閱man mysqlcheck)
$ which mysqlcheck
$ mysqlcheck -u root -p testdb1
$ mysqlcheck -u root -p testdb1 employees
$ mysqlcheck -u root -p --all-databases

在employees表格裡，新增欄位username，插在欄位pref_name的後面
> USE testdb1;
> SHOW TABLES;
> DESCRIBE employees;
> ALTER TABLE employees ADD username varchar(20) AFTER pref_name;
> DESCRIBE employees;

在employees表格裡，修改欄位pref_name的長度 (原來是50個字元改成25個)
> USE testdb1;
> SHOW TABLES;
> DESCRIBE employees;
> ALTER TABLE employees MODIFY pref_name varchar(25);
> DESCRIBE employees;

在employees表格裡，刪除欄位username
> USE testdb1;
> SHOW TABLES;
> DESCRIBE employees;
> ALTER TABLE employees DROP username;
> DESCRIBE employees;

在employees表格裡，新增共6筆記錄列
> USE testdb1;
> SHOW TABLES;
> SELECT * FROM employees;
> INSERT INTO employees (surname,givenname) VALUES
-> ("Picachu","Kenny"),
-> ("Narudo","Tony"),
-> ("Sabastin","Landy");
> INSERT INTO employees (pref_name,givenname,surname,birthday) VALUES ("Chakura","Chakura Bom","Charky","1975-02-03");
> INSERT employees (surname) VALUE ("RcLond");
> INSERT INTO employees VALUES (NULL,"Duran","Jin-Duran",NULL,NULL);
> SELECT * FROM employees;

在employees表格裡，修改記錄列
> USE testdb1;
> SHOW TABLES;
> SELECT * FROM employees;
> UPDATE employees SET pref_name = "Pika Pika", birthday = "1950-11-23" 
-> WHERE surname = "Picachu" and givenname = "Kenny";
> UPDATE employees SET pref_name = "Utsumaki", birthday = "1990-03-15"
-> WHERE surname = "Narudo";
> UPDATE employees SET birthday = "1966-04-12" WHERE surname = "Sabastin";
> SELECT * FROM employees;

在employees表格裡，刪除主鍵id=6的記錄列
> USE testdb1;
> SHOW TABLES;
> SELECT * FROM employees;
> DELETE FROM employees WHERE id = 6;
> SELECT * FROM employees;

列出employees表格裡的記錄列 (單表查詢)
> SELECT * FROM employees;
> SELECT id,pref_name,surname FROM employees;
> SELECT * FROM employees WHERE birthday > '1970-01-01';
> SELECT * FROM employees ORDER BY surname;
> SELECT * FROM employees WHERE surname LIKE "Pic%";

接下來演示SQL Join(多表查詢)
準備兩個資料表分別是department和employee，兩個表是一對多的關係 (1個部門對應多個員工)
並匯入一些測試用的記錄列，請匯入我準備的example.sql，在這裡
https://github.com/annbigbig/rose_memo/tree/master/output/sql_join/example.sql

匯入的指令 (我假設你已經先把example.sql放在/tmp目錄裡了)
> USE testdb1;
> SOURCE /tmp/example.sql

CROSS JOIN (笛卡兒乘積)
> SELECT * FROM employee CROSS JOIN department;

INNER JOIN (顯式用法)
> SELECT * FROM employee INNER JOIN department ON employee.DepartmentID = department.DepartmentID;

INNER JOIN (隱式用法)
> SELECT * FROM employee,department WHERE employee.DepartmentID = department.DepartmentID;

INNER JOIN (SQL-92規範的用法)
> SELECT * FROM employee INNER JOIN department USING(DepartmentID);

INNER JOIN (Natural join用法 - 不建議使用)
> SELECT * FROM employee NATURAL JOIN department;

LEFT OUTER JOIN (完整保留employee表的每一筆記錄)
> SELECT * FROM employee LEFT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;

LEFT OUTER JOIN (完整保留department表的每一筆記錄)
> SELECT * FROM department LEFT OUTER JOIN employee ON department.DepartmentID = employee.DepartmentId;

RIGHT OUTER JOIN (完整保留employee表的每一筆記錄)
> SELECT * FROM department RIGHT OUTER JOIN employee ON employee.DepartmentID = department.DepartmentID;

RIGHT OUTER JOIN (完整保留department表的每一筆記錄)
> SELECT * FROM employee RIGHT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;

FULL OUTER JOIN (將LEFT OUTER JOIN和RIGHT OUTER JOIN的結果作UNION運算，F = L UNION R)
> SELECT * FROM employee LEFT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID
-> UNION
-> SELECT * FROM employee RIGHT OUTER JOIN department ON employee.DepartmentID = department.DepartmentID;

演示SELF JOIN之前再匯入一個表格tb_employee
表定義的example002.sql在這裡 
https://github.com/annbigbig/rose_memo/tree/master/output/sql_join/example002.sql

(假設你已經複製到/tmp/example002.sql)
> USE testdb1;
> SOURCE /tmp/example002.sql

SELF JOIN (2個country欄位相同的員工，編成一條記錄列)
> SELECT f.id,f.name,s.id,s.name,f.country
-> FROM tb_employee f INNER JOIN tb_employee s ON f.country = s.country
-> WHERE f.id < s.id ORDER BY f.id,s.id;

終端機輸出在這裡：
https://github.com/annbigbig/rose_memo/blob/master/output/sql_join/CROSS_JOIN.txt
https://github.com/annbigbig/rose_memo/blob/master/output/sql_join/INNER_JOIN.txt
https://github.com/annbigbig/rose_memo/blob/master/ouput/sql_join/LEFT_OUTER_JOIN.txt
https://github.com/annbigbig/rose_memo/blob/master/ouput/sql_join/RIGHT_OUTER_JOIN.txt
https://github.com/annbigbig/rose_memo/blob/master/output/sql_join/FULL_OUTER_JOIN.txt
https://github.com/annbigbig/rose_memo/blob/master/output/sql_join/SELF_JOIN.txt

備份 (把testdb1資料庫備份到指定的路徑)
# mysqldump -u root -p testdb1 > /tmp/testdb1.sql

還原之前可以把整個testdb1資料庫砍了，建立一個新的資料庫testdb2
> DROP DATABASE testdb1;
> CREATE DATABASE testdb2;
> SHOW DATABASES;

還原 (在MariaDB提示符裡進行還原)
> USE testdb2;
> SOURCE /tmp/testdb1.sql;
> SHOW TABLES;

還原 (在Bash Shell提示符裡進行還原)
# mysql -u root -p testdb2 < /tmp/testdb1.sql

=========================================================================================================================
5.3 安裝PhpMyAdmin並設定開機後自動運行於127.0.0.1:9080
=========================================================================================================================

下載、解壓縮、設定目錄權限值、移動phpMyAdmin目錄
# cd /usr/local/src
# wget https://files.phpmyadmin.net/phpMyAdmin/4.5.0.2/phpMyAdmin-4.5.0.2-all-languages.zip
# unzip ./phpMyAdmin-4.5.0.2-all-languages.zip
# chown -R root:www-data ./phpMyAdmin-4.5.0.2-all-languages
# chmod -R ug+w ./phpMyAdmin-4.5.0.2-all-languages
# mv ./phpMyAdmin-4.5.0.2-all-languages /usr/local/nginx/phpMyAdmin-4.5.0.2
# ln -s /usr/local/nginx/phpMyAdmin-4.5.0.2 /usr/local/nginx/phpmyadmin

產生phpMyAdmin的設定檔config.inc.php
# cd /usr/local/nginx/phpmyadmin/
# touch ./config.inc.php
# chown root:www-data ./config.inc.php
# chmod 644 ./config.inc.php

設定檔config.inc.php內容如下，請參考這裡
https://github.com/annbigbig/rose_memo/tree/master/conf/phpMyAdmin-4.5.0.2/config.inc.php

phpMyAdmin需要Configuration Storage的設定
在MariaDB資料庫裡需要新增一個pma@localhost的用戶，並授權他擁有資料庫phpmyadmin某些存取權限
> CREATE USER 'pma'@'localhost' IDENTIFIED BY 'pmapassword';
> GRANT SELECT, INSERT, DELETE, UPDATE, ALTER ON phpmyadmin.* TO 'pma'@'localhost';
> SHOW GRANTS FOR 'pma'@'localhost';

匯入資料庫phpmyadmin
> SOURCE /usr/local/nginx/phpmyadmin/sql/create_tables.sql

然後可以看看資料庫裡有什麼表格？
> SHOW DATABASES;
> USE phpmyadmin;
> SHOW TABLES;

產生VirtualHost的設定檔
# cd /usr/local/nginx/conf/vhosts/
# touch ./127.0.0.1:9080.conf
# chown root:www-data ./127.0.0.1\:9080.conf
# chmod 640 ./127.0.0.1\:9080.conf

設定檔/usr/local/nginx/conf/vhosts/127.0.0.1:9080內容如下，請參考這裡
https://github.com/annbigbig/rose_memo/tree/master/conf/nginx-1.9.5/usr/local/nginx/conf/vhosts/127.0.0.1:9080.conf

檢查一下nginx設定檔語法是否確？
# cd /usr/local/nginx
# sbin/nginx -t -c conf/nginx.conf

如果正確，就重新啟動nginx服務器
# service nginx status
# service nginx restart
# service nginx status

看看nginx運行後Listening的端口
# netstat -anp|grep nginx

如果在終端機有看到一條這樣的輸出
tcp        0      0 127.0.0.1:9080          0.0.0.0:*               LISTEN      3667/nginx.conf

就是phpMyAdmin已經順利運行於127.0.0.1的9080端口
可以直接在Server的LXDE打開瀏覽器進入phpMyAdmin管理介面，連線的URL是
http://127.0.0.1:9080
登入用戶名和密碼是和用來登入MariaDB資料庫的相同，注意root被我禁止登入了
你可以用稍早之前建立的MariaDB超級使用者tony和密碼tonypassword登入
也可以建立ssh tunnel將用戶端127.0.0.1:9080與服務器這邊的127.0.0.1:9080對接，細節不再重複敘述

=========================================================================================================================

4.安裝nginx和php-fpm

工作列表
=========================================================================================================================
4.1 安裝好nginx並設定成開機後自動執行的服務
4.2 安裝好php-fpm並設定成開機後自動執行的服務
4.3 預設站台http://localhost設定
4.4 自簽SSL證書
4.5 用戶端/etc/hosts設定
4.6 準備網站根目錄並設定好權限
4.7 加入一個VirtualHost設定www.marumaru.com.tw運行於tcp port 80與443
4.8 重導所有http流量到https

=========================================================================================================================
4.1 安裝好nginx並設定成開機後自動執行的服務
=========================================================================================================================

切換成root用戶好方便作事
$ sudo -i

我是誰？
# whoami

終端機回答
root

更新套件庫
# apt-get update

安裝libtool
# apt-get install libtool

安裝完成，可以這樣檢視剛才安裝的libtool套件
# dpkg -l | grep libtool

切換目錄，待會兒下載的tar.gz都會放在這裡
# cd /usr/local/src

下載zlib、pcre、openssl、libjpeg原始碼的tar.gz包，然後解壓縮
# wget http://zlib.net/zlib-1.2.8.tar.gz
# tar -zxvf ./zlib-1.2.8.tar.gz
# chown -R root:root ./zlib-1.2.8

# wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz
# tar -zxvf ./pcre-8.37.tar.gz
# chown -R root:root ./pcre-8.37

# wget https://www.openssl.org/source/openssl-1.0.2d.tar.gz
# tar -zxvf ./openssl-1.0.2d.tar.gz
# chown -R root:root ./openssl-1.0.2d

下載nginx的原始碼tar.gz，解壓縮之後，進入nginx-1.9.5目錄
# wget http://nginx.org/download/nginx-1.9.5.tar.gz
# tar -zxvf ./nginx-1.9.5.tar.gz
# chown -R root:root ./nginx-1.9.5
# cd ./nginx-1.9.5

查看一下有什麼configure options
# ./configure --help

然後./configure
# ./configure --prefix=/usr/local/nginx-1.9.5 \
--user=www-data \
--group=www-data \
--with-http_ssl_module \
--with-pcre=/usr/local/src/pcre-8.37 \
--with-zlib=/usr/local/src/zlib-1.2.8 \
--with-openssl=/usr/local/src/openssl-1.0.2d

如果沒有問題，終端機會這樣回應(只附上最後一小段)
Configuration summary
  + using PCRE library: /usr/local/src/pcre-8.37
  + using OpenSSL library: /usr/local/src/openssl-1.0.2d
  + md5: using OpenSSL library
  + sha1: using OpenSSL library
  + using zlib library: /usr/local/src/zlib-1.2.8

  nginx path prefix: "/usr/local/nginx-1.9.5"
  nginx binary file: "/usr/local/nginx-1.9.5/sbin/nginx"
  nginx configuration prefix: "/usr/local/nginx-1.9.5/conf"
  nginx configuration file: "/usr/local/nginx-1.9.5/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx-1.9.5/logs/nginx.pid"
  nginx error log file: "/usr/local/nginx-1.9.5/logs/error.log"
  nginx http access log file: "/usr/local/nginx-1.9.5/logs/access.log"
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"


編譯
# make

安裝
# make install

安裝好的nginx binary在路徑/usr/local/nginx-1.9.5
# cd /usr/local
# ls -al|grep nginx

終端機回應了
drwxr-xr-x  6 root root 4096  9月 28 18:26 nginx-1.9.5

修改一下/usr/local/nginx-1.9.5
包含的所有子目錄和檔案的擁有人、群組和權限值
# chown -R root:www-data ./nginx-1.9.5
# chmod -R g+w ./nginx-1.9.5

最後作一個Symbolic Link
# ln -s nginx-1.9.5 nginx

在啟動nginx之前，先給它搞一個啟動腳本，也就是init script
搜尋關鍵字
「ubuntu 14.04 nginx init script」
參考資料
https://github.com/JasonGiedymin/nginx-init-ubuntu

從github把這個repo拉下來
# cd /tmp
# git clone https://github.com/JasonGiedymin/nginx-init-ubuntu.git
# cd nginx-init-ubuntu/

把init script複製到/etc/init.d/目錄裡面，修改擁有人、群組和權限值
# cp ./nginx /etc/init.d/
# chown root:root /etc/init.d/nginx
# chmod 755 /etc/init.d/nginx

現在開始你可以這樣控制nginx服務
# service nginx status  (查看服務狀態)
# service nginx start  (啟動)
# service nginx stop  (停止)
# service nginx restart (重新啟動)

然後我啟動了nginx服務
# service nginx start

接著看一下有沒有在跑？
# service nginx status

終端機回答了
* Nginx Server... found running with processes:  4079 4078

看看tcp port 80有沒有在Listening？
# netstat -anp|grep nginx

終端機回答了
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      4078/nginx.conf 
unix  3      [ ]         STREAM     CONNECTED     23638    4078/nginx.conf     
unix  3      [ ]         STREAM     CONNECTED     23639    4078/nginx.conf     

現在nginx服務運行於本機(10.1.1.170)的tcp port 80
到筆記型電腦上(10.1.1.90)打開瀏覽器，連到
http://10.1.1.170

可以看到瀏覽器顯示了網頁
Welcome to nginx!

If you see this page, 
the nginx web server is successfully installed and working. 
Further configuration is required.
巴拉巴拉巴拉
這個預設的nginx首頁的路徑放在/usr/local/nginx/html/index.html

現在nginx服務可以手動啟動了
接下來要設定開機的時候自動啟動nginx服務（第一次執行update-rc.d指令）
# update-rc.d -f nginx defaults

順便一提如果要讓nginx取消開機自動執行，指令是： 
# update-rc.d -f nginx disable

然後再打開就是
# update-rc.d -f nginx enable

設定好開機自動啟動nginx服務，現在重新開機
# reboot

再次檢查nginx服務有沒有跑起來？
# netstat -anp | grep nginx

如果看到終端機這樣回應
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1380/nginx.conf 
unix  3      [ ]         STREAM     CONNECTED     8223     1380/nginx.conf     
unix  3      [ ]         STREAM     CONNECTED     8224     1380/nginx.conf  

恭喜你，完成了第一個工作，可喜可賀

=========================================================================================================================
4.2 安裝好php-fpm並設定成開機後自動執行的服務
=========================================================================================================================

參考資料
http://www.linuxfromscratch.org/blfs/view/svn/general/php.html

安裝依賴套件
# apt-get update
# apt-get install libxml2-dev libssl-dev libbz2-dev libcurl4-openssl-dev libdb5.1-dev libjpeg-dev libpng12-dev
# apt-get install libXpm-dev libfreetype6-dev libt1-dev libgmp3-dev libc-client2007e-dev libldap2-dev libmcrypt-dev libmhash-dev
# apt-get install freetds-dev zlib1g-dev libmysqlclient-dev libncurses5-dev libpcre3-dev unixODBC-dev 
# apt-get install libsqlite0-dev libaspell-dev libreadline6-dev librecode-dev libsnmp-dev libtidy-dev libxslt1-dev libt1-dev
# apt-get install snmp

下載需要的tar.gz並解開它們
剛才安裝Nginx服務器的時候，openssl和zlib已經下載過了就不用再下載
# cd /usr/local/src
# wget http://au1.php.net/distributions/php-5.6.14.tar.gz
# wget http://sourceforge.net/projects/mcrypt/files/MCrypt/2.6.8/mcrypt-2.6.8.tar.gz

編譯openssl並安裝
# cd /usr/local/src/openssl-1.0.2d
# ./config --prefix=/usr/local/openssl-1.0.2d
# make
# make test
# make install
# ln -s /usr/local/openssl-1.0.2d /usr/local/openssl

編譯zlib並安裝
# cd /usr/local/src
# cd ./zlib-1.2.8
# ./configure –prefix=/usr/local/zlib-1.2.8
# make
# make check
# make install
# ln -s /usr/local/zlib-1.2.8 /usr/local/zlib

編譯mcrypt並安裝
# cd /usr/local/src
# tar -zxvf ./mcrypt-2.6.8.tar.gz
# chown -R root:root ./mcrypt-2.6.8
# chmod -R go-w ./mcrypt-2.6.8
# cd ./mcrypt-2.6.8
# ./configure --prefix=/usr/local/mcrypt-2.6.8 –disable-posix-threads
# make
# make check
# make install
# ln -s /usr/local/mcrypt-2.6.8 /usr/local/mcrypt

編譯libjpeg並安裝
# wget http://www.ijg.org/files/jpegsrc.v9a.tar.gz
# tar -zxvf ./jpegsrc.v9a.tar.gz
# chown -R root:root ./jpeg-9a
# cd ./jpeg-9a/
# ./configure --help
# ./configure --prefix=/usr/local/libjpeg-9a
# make
# make install
# ln -s /usr/local/libjpeg-9a /usr/local/libjpeg

下載freetype2
# wget http://download.savannah.gnu.org/releases/freetype/freetype-2.6.1.tar.gz
# wget http://download.savannah.gnu.org/releases/freetype/freetype-2.6.1.tar.gz.sig

檢查來源是否可信賴？
# gpg --verify ./freetype-2.6.1.tar.gz.sig ./freetype-2.6.1.tar.gz
# gpg --recv-key E707FDA5
# gpg ./freetype-2.6.1.tar.gz.sig 

編譯freetype2並安裝
# tar -zxvf ./freetype-2.6.1.tar.gz
# chown -R root:root ./freetype-2.6.1
# cd ./freetype-2.6.1/
# ./configure --help
# ./configure --prefix=/usr/local/freetype-2.6.1
# make
# make install
# ln -s /usr/local/freetype-2.6.1 /usr/local/freetype

編譯curl並安裝
# cd /usr/local/src
# git clone https://github.com/bagder/curl

安裝說明請看這裡
https://github.com/bagder/curl/blob/master/GIT-INFO

安裝依賴套件
# apt-get update
# apt-get install autoconf automake libtool m4

說明裡有一段話
If you don't have nroff and perl and you for some reason don't want to
   install them, you can rename the source file src/tool_hugehelp.c.cvs to
   src/tool_hugehelp.c and avoid having to generate this file. This will
   give you a stubbed version of the file that doesn't contain actual content.

照作
# cd ./curl/src/
# mv ./tool_hugehelp.c.cvs ./tool_hugehelp.c

開始編譯，然後安裝
# cd /usr/local/src/curl
# ./buildconf
# ./configure --prefix=/usr/local/curl-7.46.0-dev --with-ssl
# make
# make test
# make install
# ln -s /usr/local/curl-7.46.0-dev /usr/local/curl

重要的連結檔gmp.h
# ln -s /usr/include/arm-linux-gnueabihf/gmp.h /usr/include/gmp.h

下載(Bug 65398)補丁於/tmp目錄
# cd /tmp
# wget -O fpm-race-condition.patch 'https://bugs.php.net/patch-display.php?bug_id=65398&patch=fpm-race-condition.patch&revision=1375772074&download=1' -4

解開php-5.6.14.tar.gz
# cd /usr/local/src
# tar -zxvf ./php-5.6.14.tar.gz
# chown -R root:root ./php-5.6.14

打上補丁
# patch -d php-5.6.14 -p0 < /tmp/fpm-race-condition.patch

編譯php-fpm並安裝
# cd ./php-5.6.14
# ./configure -h
# ./configure --prefix=/usr/local/php-5.6.14 \ 
> --enable-opcache --enable-fpm \ 
> --with-mysql --with-mysqli --with-pdo-mysql --with-mysql-sock=/run/mysqld/mysqld.sock \ 
> --with-openssl --with-openssl-dir=/usr/local/openssl-1.0.2d --with-kerberos \ 
> --with-mhash --with-mcrypt=/usr/local/mcrypt-2.6.8 --enable-bcmath --with-gmp \ 
> --enable-shmop --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm \ 
> --enable-soap --enable-wddx --with-xmlrpc --with-readline --enable-calendar \ 
> --with-gettext --enable-mbstring \ 
> --with-zlib --with-zlib-dir=/usr/local/zlib-1.2.8 \ 
> --with-bz2 --enable-zip --enable-exif --with-gd \
> --with-jpeg-dir=/usr/local/libjpeg-9a --with-freetype-dir=/usr/local/freetype-2.6.1 \
> --with-snmp --with-curl=/usr/local/curl-7.46.0-dev
# make


編譯完成
終端機出現訊息(只取最後2行)
Build complete.
Don't forget to run 'make test'.

但是在上面幾行的地方，出現了
PEAR package PHP_Archive not installed: generated phar will require PHP's phar extension be enabled.

把這一串訊息輸入google搜尋，得到了
參考資料
http://forums.devshed.com/php-development-5/install-pear-php-5-3-8-a-850520.html
http://www.5ienet.com/note/html/stlamp6/index.shtml

解決方法就是下載go-pear.phar然後用php執行它
先跑完測試，先安裝完再來解決這個問題
# make test
# make install

回到剛才的pear的問題
# cd /tmp
# wget http://pear.php.net/go-pear.phar
# /usr/local/php-5.6.14/bin/php /tmp/go-pear.phar

接下來會進入一個交談式的介面，按下Enter一次，完成pear的安裝
(輸出訊息略)

安裝Net_IPv4和Net_IPv6
# cd /usr/local/php-5.6.14/bin/
# ./pear install Net_IPv4
# ./pear install Net_IPv6

建立Symbolic Link
複製設定檔到正確的路徑
設定php-fpm執行檔的權限
# ln -s /usr/local/php-5.6.14 /usr/local/php
# cp /usr/local/src/php-5.6.14/php.ini-development /usr/local/php/lib/php.ini
# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
# cp /usr/local/php/sbin/php-fpm /usr/local/sbin/
# chown root:root /usr/local/sbin/php-fpm
# chmod a+x /usr/local/sbin/php-fpm

設定php.ini
# cp /usr/local/php/lib/php.ini /usr/local/php/lib/php.ini.default
# vi /usr/local/php/lib/php.ini

我只列出有更動的部分，或是雖然沒更動但是很重要的部分，請你改成和我一樣，如下
(如果要查看完整的php.ini，請在這個repo的conf子目錄下可以找到)
cgi.fix_pathinfo=0
default_charset = "UTF-8"
date.timezone = Asia/Taipei
date.default_latitude = 25.259240
date.default_longitude = 121.501834
mysqli.default_port = 3306
mysqli.default_socket = /run/mysqld/mysqld.sock
mysqli.default_host = localhost
pdo_mysql.default_socket = /run/mysqld/mysqld.sock
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
always_populate_raw_post_data = -1

設定php-fpm.conf
# vi /usr/local/php/etc/php-fpm.conf

一樣只列出更動後的部分，請你改成這樣
user = www-data
group = www-data
pid = run/php-fpm.pid

第一次準備啟動php-fpm，再次確認binary執行的位置
# which php-fpm

終端機回應了
/usr/local/sbin/php-fpm

執行php-fpm
# php-fpm

然後看看有沒有真的跑起來？
# netstat -anp|grep php

終端機回應了
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      2736/php-fpm.conf)
unix  3      [ ]         STREAM     CONNECTED     13921    2736/php-fpm.conf)  
unix  3      [ ]         STREAM     CONNECTED     13922    2736/php-fpm.conf)  

有耶，真的跑起來了
現在已經可以啟動php-fpm了，先殺掉剛才啟動的php-fpm程序
我們待會給它弄一個init script
我殺
# kill 2736
# netstat -anp|grep php
# 

複製init script並設定權限值
# cp /usr/local/src/php-5.6.14/sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm
# chown root:root /etc/init.d/php-fpm 
# chmod 755 /etc/init.d/php-fpm

修改/etc/init.d/php-fpm
# vi /etc/init.d/php-fpm

把原來的這5行
prefix=@prefix@ 
exec_prefix=@exec_prefix@ 
php_fpm_BIN=@sbindir@/php-fpm 
php_fpm_CONF=@sysconfdir@/php-fpm.conf 
php_fpm_PID=@localstatedir@/run/php-fpm.pid

改成這樣，然後存檔離開
#prefix=@prefix@ 
#exec_prefix=@exec_prefix@ 
php_fpm_BIN=/usr/local/sbin/php-fpm 
php_fpm_CONF=/usr/local/php/etc/php-fpm.conf 
php_fpm_PID=/usr/local/php/var/run/php-fpm.pid 

現在你可以使用這樣的指令，操作php-fpm服務 
(啟動、停止、重新啟動，查看服務狀態)
# /etc/init.d/php-fpm start
# /etc/init.d/php-fpm stop
# /etc/init.d/php-fpm restart
# /etc/init.d/php-fpm status

或是這樣也可以，和上面同樣意思的指令
# service php-fpm start
# service php-fpm stop
# service php-fpm restart
# service php-fpm status

最後是把php-fpm設定成開機後自動啟動的服務
然後重新開機，看看php-fpm有沒有真的自動啟動？
# update-rc.d php-fpm defaults
# reboot

重新開機之後，執行下列指令檢查
# netstat -anp|grep php

如果終端機這樣回應
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      1410/php-fpm.conf)
unix  3      [ ]         STREAM     CONNECTED     1946     1410/php-fpm.conf)  
unix  3      [ ]         STREAM     CONNECTED     1947     1410/php-fpm.conf)  

恭喜你，這樣就確認php-fpm是開機後自動啟動的服務了

=========================================================================================================================
4.3 預設站台http://localhost設定
=========================================================================================================================
剛才安裝了php-fpm，現在我們可以解釋php網頁了
不過要修改nginx.conf設定檔然後重新啟動Nginx服務器才行
# vi /usr/local/nginx/conf/nginx.conf

把這一行
worker_processes  1;
改成這樣 (因為小板板是4核心)
worker_processes  4;

還有這一行
#charset koi8-r;
改成這樣
charset utf-8;
而且記得這一行最好是放在http{}區塊裡，而不是server{}區塊裡
我把它放在http{}區塊裡的第4行
在default_type  application/octet-stream;這一行的下面

接下來，找到這個區塊
	location / { 
            root   html; 
            index  index.html index.htm; 
	}

改成這樣
	location / { 
            root   html; 
            index  index.html index.htm index.php; 
	}

然後緊跟著剛才的location / { … } 區塊，再加上這個區塊
	location ~* \.php$ {
                fastcgi_index   index.php;
                fastcgi_pass    127.0.0.1:9000;
                include         fastcgi_params;
                fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
                fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
	}

按Esc鍵然後:wq存檔離開vi文字編輯器
測試一下nginx.conf設定檔
# cd /usr/local/nginx
# sbin/nginx -t -c conf/nginx.conf

如果你看到終端機回應
nginx: the configuration file /usr/local/nginx-1.9.5/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx-1.9.5/conf/nginx.conf test is successful
這樣就表示你的nginx.conf設定檔沒有問題

產生index.php
# echo "<?php phpinfo(); ?>" >> /usr/local/nginx/html/index.php

重新啟動Nginx服務器
# service nginx status
# service nginx restart
# service nginx status
# netstat -anp | grep nginx
# ps aux |grep nginx

現在到筆記型電腦10.1.1.90上打開瀏覽器
連線到這個網址
http://10.1.1.170/index.php

會看到phpinfo()的這個php測試網頁

=========================================================================================================================
4.4 自簽SSL證書
=========================================================================================================================
先查看現在的openssl是用那一個路徑的？那一個版本？
# which openssl

終端機回應了
/usr/bin/openssl

# openssl version

終端機回應了
OpenSSL 1.0.1i-dev xx XXX xxxx

這是rootfs上面舊的1.0.1i版的
稍早前因為安裝php-fpm，又自已build了一個openssl-1.0.2d的新一點的版本
就拿它來產生自簽的SSL證書，再次確認它的版本號
# cd /usr/local/openssl-1.0.2d/bin
# ./openssl version

終端機回應了
OpenSSL 1.0.2d 9 Jul 2015

產生自簽的SSL證書的指令是這樣
# cd /usr/local/nginx
# mkdir ssl
# cd ssl
# /usr/local/openssl-1.0.2d/bin/openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./www.marumaru.com.tw.key -out ./www.marumaru.com.tw.crt
# chown -R root:www-data /usr/local/nginx/ssl
# chmod 644 www.marumaru.com.tw.crt
# chmod 440 www.marumaru.com.tw.key

實際產生key和crt的時候
要回答一些問題，如下 (我放在這個repo的output子目錄下)
https://github.com/annbigbig/rose_memo/tree/master/ouput/php-5.6.13/generate_ssl_certificate.txt

看一下產生的key和crt
# ls -al|grep maru

終端機回應了
-rw-r--r--  1 root www-data 1472 10月  2 15:22 www.marumaru.com.tw.crt
-r--r-----  1 root www-data 1708 10月  2 15:22 www.marumaru.com.tw.key

=========================================================================================================================
4.5 用戶端/etc/hosts設定
=========================================================================================================================
參考資料
https://en.wikipedia.org/wiki/Private_network#IPv4
https://en.wikipedia.org/wiki/List_of_DNS_record_types
https://en.wikipedia.org/wiki/Hosts_(file)

因為我們的服務器的IP是10.1.1.170
是在家裡的Private IP網段 10.1.1.0/24
10.1.1.170它沒有辦法注冊到任何一台實際存在於地球上的DNS服務器裡成為一條合法的A record
(它們只能作domain name和public IP的對應)
所以在這裡你需要設定瀏覽器用戶端10.1.1.90這台機器上的/etc/hosts
讓它可以把
www.marumaru.com.tw
這個我臨時唬爛的域名
和我們的private IP
10.1.1.170
作映射

在10.1.1.90 (筆記型電腦)的終端機下
修改/etc/hosts之前，先實驗一下
# ping www.marumaru.com.tw

終端機回答了
ping: unknown host www.marumaru.com.tw
它根本就不認識域名www.marumaru.com.tw

接著打開vi文字編輯器修改/etc/hosts
就加入一行
10.1.1.170          www.marumaru.com.tw
修改完存檔離開

接著在終端機下執行
# ping www.marumaru.com.tw

終端機回應了
PING www.marumaru.com.tw (10.1.1.170) 56(84) bytes of data.
64 bytes from www.marumaru.com.tw (10.1.1.170): icmp_seq=1 ttl=64 time=0.821 ms
64 bytes from www.marumaru.com.tw (10.1.1.170): icmp_seq=2 ttl=64 time=0.726 ms
64 bytes from www.marumaru.com.tw (10.1.1.170): icmp_seq=3 ttl=64 time=0.743 ms
^C
--- www.marumaru.com.tw ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 0.726/0.763/0.821/0.047 ms

這表示10.1.1.90 (筆記型電腦)可以認得域名www.marumaru.com.tw就是10.1.1.170

=========================================================================================================================
4.6 準備網站根目錄並設定好權限
=========================================================================================================================
# cd /home/labasky
# mkdir website-marumaru
# cd website-marumaru/
# echo 'welcome!<br>index page of www.marumaru.com.tw' >> ./index.html
# chown -R labasky:labasky /home/labasky/website-marumaru/

查看目前群組labasky裡有那些用戶？
# getent group labasky

終端機回答了
labasky:x:1002:

把用戶www-data加到labasky群組
# usermod -a -G labasky www-data

用戶www-data是nginx worker process執行的身分 (可執行ps aux | grep nginx確認一下)
而labasky是網站根目錄持有人的身分

再次查看目前群組labasky裡有那些用戶？
# getent group labasky

終端機回答了
labasky:x:1002:www-data

查看用戶www-data參加了那些群組？
# id www-data

終端機回答了
uid=33(www-data) gid=33(www-data) 群組=33(www-data),1002(labasky)

=========================================================================================================================
4.7 加入一個VirtualHost設定www.marumaru.com.tw運行於tcp port 80與443
=========================================================================================================================
修改nginx.conf設定檔
# vi /usr/local/nginx/conf/nginx.conf

找到http區塊
大概是這個地方
http {
    include       mime.types;
    default_type  application/octet-stream;
    charset utf-8;

硬插一行進去
這一行會把vhosts子目錄下所有的.conf設定檔案包含進來
http {
    include       mime.types;
    include       vhosts/*.conf;
    default_type  application/octet-stream;
    charset utf-8;

改好就按Esc鍵:wq離開vi文字編輯器
建立該vhosts子目錄
# cd /usr/local/nginx/conf
# mkdir vhosts
# chown root:www-data vhosts
# chmod 770 vhosts

產生虛擬主機www.marumaru.com.tw的設定檔
# cd vhosts/
# touch ./www.marumaru.com.tw.conf
# chown root:www-data ./www.marumaru.com.tw.conf
# chmod 640 ./www.marumaru.com.tw.conf
# vi ./www.marumaru.com.tw.conf 

內容如下
# testing virtual host - www.marumaru.com.tw
    server {
      server_name www.marumaru.com.tw;
      listen 80;
      listen 443 ssl;
      ssl_certificate /usr/local/nginx/ssl/www.marumaru.com.tw.crt;
      ssl_certificate_key /usr/local/nginx/ssl/www.marumaru.com.tw.key;
      root /home/labasky/website-marumaru;
      access_log  logs/marumaru.access.log combined;
      error_log   logs/marumaru.error.log;

      location / {
         index index.php index.html index.htm;
      }

       # follow the PHP official website's instructions
      location ~* \.php$ {
           fastcgi_index   index.php;
           fastcgi_pass    127.0.0.1:9000;
           include         fastcgi_params;
           fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
           fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
      }
    }


存檔離開vi文字編輯器
現在測試一下nginx.conf設定檔的文法是否正確？
# cd /usr/local/nginx
# sbin/nginx -t -c conf/nginx.conf

終端機回答了
nginx: the configuration file /usr/local/nginx-1.9.5/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx-1.9.5/conf/nginx.conf test is successful

看起來沒問題的樣子
那就重新啟動Nginx服務器
# service nginx status
# service nginx restart
# service nginx status

到筆記型電腦10.1.1.90打開瀏覽器
然後分別連線到URL
http://www.marumaru.com.tw/
https://www.marumaru.com.tw/
確認有沒有看到剛才我們網站根目錄裡預設的首頁index.html
也就是
welcome!
index page of www.marumaru.com.tw

=========================================================================================================================
4.8 重導所有http流量到https
=========================================================================================================================
搜尋關鍵字
nginx rewrite http to https

參考資料
http://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom

修改虛擬主機www.marumaru.com.tw的設定檔
# cd /usr/local/nginx/conf/vhosts/
# vi ./www.marumaru.com.tw.conf

把內容改成這樣
# testing virtual host - www.marumaru.com.tw 
    server {
      server_name www.marumaru.com.tw; 
      listen 80;
      return 301 https://$server_name$request_uri;
    }

    server { 
      server_name www.marumaru.com.tw; 
      listen 443 ssl; 
      ssl_certificate /usr/local/nginx/ssl/www.marumaru.com.tw.crt; 
      ssl_certificate_key /usr/local/nginx/ssl/www.marumaru.com.tw.key; 
      root /home/labasky/website-marumaru; 
      access_log  logs/marumaru.access.log combined; 
      error_log   logs/marumaru.error.log; 
      
      location / { 
         index index.php index.html index.htm; 
      }  
      
       # follow the PHP official website's instructions 
      location ~* \.php$ { 
           fastcgi_index   index.php; 
           fastcgi_pass    127.0.0.1:9000; 
           include         fastcgi_params; 
           fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name; 
           fastcgi_param   SCRIPT_NAME        $fastcgi_script_name; 
      }    
    }

存檔離開vi文字編輯器
現在測試一下nginx.conf設定檔的文法是否正確？
# cd /usr/local/nginx
# sbin/nginx -t -c conf/nginx.conf

如果設定檔正確，終端機會說
nginx: the configuration file /usr/local/nginx-1.9.5/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx-1.9.5/conf/nginx.conf test is successful

然後就重新啟動Nginx服務器
# service nginx status
# service nginx restart
# service nginx status

重新啟動nginx之後，到筆記型電腦10.1.1.90打開瀏覽器
然後連線到URL
http://www.marumaru.com.tw/
你會發現會被強制重導向到
https://www.marumaru.com.tw/

這樣就成功了

=========================================================================================================================

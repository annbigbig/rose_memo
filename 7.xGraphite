7.x 安裝Graphite

參考資料
http://www.roblayton.com/2014/12/graphite-installation-with-uwsgi-nginx.html
https://gist.github.com/hmmbug/11378689
https://github.com/graphite-project/graphite-web/issues/1388

搜尋關鍵字
graphite mysql ubuntu
graphite nginx config ubuntu

安裝套件
# apt-get install -y python python-dev python-virtualenv libevent-dev python-pip python-cairo python-django-tagging python-twisted python-memcache python-pysqlite2
# apt-get install -y uwsgi uwsgi-plugin-python python-mysqldb

加入一個nginx的Virtual Host設定檔
# cat >> /usr/local/nginx/conf/vhosts/graphite.conf << EOF
upstream graphite {
    server unix:///tmp/uwsgi.sock;
}

server {
    listen 9222;
    server_name localhost;

    access_log logs/graphite-access.log combined;
    error_log logs/graphite-error.log;

    location / {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "origin, authorization, accept";

        uwsgi_pass graphite;
        include uwsgi_params;
    }

    location /media {
        # This makes static media available at the /media/ url.  The
        # media will continue to be available during site downtime,
        # allowing you to use styles and images in your maintenance page.
        alias /usr/lib/python2.7/dist-packages/django/contrib/admin/media;
    }
}
EOF

# chown root:www-data /usr/local/nginx/conf/vhosts/graphite.conf
# chmod 640 /usr/local/nginx/conf/vhosts/graphite.conf

設定UWSGI
# cat >> /etc/uwsgi/apps-available/graphite.ini << EOF

[uwsgi]
processes = 2
pidfile = /tmp/uwsgi.pid
socket = /tmp/uwsgi.sock
gid = www-data
uid = www-data
virtualenv = /opt/graphite
chdir = /opt/graphite/conf
module = wsgi:application
EOF

作Symbolic Link連結到剛才的graphite.ini
# ln -s /etc/uwsgi/apps-available/graphite.ini /etc/uwsgi/apps-enabled/

配置資料庫
# cat >> /tmp/graphite.sql << EOF
create database graphite;
create user 'graphite'@'localhost' identified by 'graphitepassword';
grant all privileges on graphite.* to 'graphite'@'localhost';
flush privileges;
EOF
# mysql -h localhost --port 3306 -u root -p < /tmp/graphite.sql

建立用戶graphite並把他加到/etc/sudoers裡
# adduser graphite
# visudo

加到root那一行的下面，也就是
root    ALL=(ALL:ALL) ALL
graphite    ALL=(ALL:ALL) ALL

順便一提，如果用指令來作，請參考這裡
http://askubuntu.com/questions/7477/how-can-i-add-a-new-user-as-sudoer-using-the-command-line

按ESC然後:wq離開vi文字編輯器
切換為用戶graphite
# su graphite

設定Graphite
$ cd /opt; sudo mkdir graphite; sudo chown graphite graphite; sudo chgrp graphite graphite
$ virtualenv graphite
$ source graphite/bin/activate

安裝graphite和其依賴，並將一些設定檔複製過來
$ pip install carbon graphite-web whisper 'Twisted<12.0'  django==1.5 simplejson 'django-tagging<0.4' mysql-python
$ cd /opt/graphite/conf/
$ sudo mkdir examples
$ sudo mv *.example examples
$ sudo cp examples/storage-schemas.conf.example storage-schemas.conf
$ sudo cp examples/storage-aggregation.conf.example storage-aggregation.conf
$ sudo cp examples/carbon.conf.example carbon.conf
$ sudo cp examples/graphite.wsgi.example wsgi.py
$ sudo cp examples/dashboard.conf.example dashboard.conf
$ sudo cp examples/graphTemplates.conf.example graphTemplates.conf
$ sudo cp /opt/graphite/webapp/graphite/{local_settings.py.example,local_settings.py}

設定local_settings.py
$ sudo -i
# cd /opt/graphite/webapp/graphite/
# sed -i -- "s|#SECRET_KEY = 'UNSAFE_DEFAULT'|SECRET_KEY = 'a1b2c3d4e5f6g7h8i9'|g" ./local_settings.py
# sed -i -- "s|#TIME_ZONE = 'America/Los_Angeles'|TIME_ZONE = 'Asia/Taipei'|g" ./local_settings.py
# sed -i -- "s|#USE_REMOTE_USER_AUTHENTICATION = True|USE_REMOTE_USER_AUTHENTICATION = True|g" ./local_settings.py
# sed -i -- "s|#DEBUG = True|DEBUG = True|g" ./local_settings.py
# sed -i -- "s|'NAME': '/opt/graphite/storage/graphite.db',|'NAME': 'graphite',|g" ./local_settings.py
# sed -i -- "s|'ENGINE': 'django.db.backends.sqlite3',|'ENGINE': 'django.db.backends.mysql',|g" ./local_settings.py
# sed -i -- "s|'USER': '',|'USER': 'graphite',|g" ./local_settings.py
# sed -i -- "s|'PASSWORD': '',|'PASSWORD': 'graphitepassword',|g" ./local_settings.py
# sed -i -- "s|'HOST': '',|'HOST': 'localhost',|g" ./local_settings.py
# sed -i -- "s|'PORT': ''|'PORT': '3306'|g" ./local_settings.py

結果sed置換後local_settings.py變成這樣(對厚…>  <)
#DATABASES = {
#    'default': {
#        'NAME': 'graphite',
#        'ENGINE': 'django.db.backends.mysql',
#        'USER': 'graphite',
#        'PASSWORD': 'graphitepassword',
#        'HOST': 'localhost',
#        'PORT': '3306'
#    }
#}
#

只好自已再用vi進去手動把前面的#注解都拿掉

設定dashboard和graph template
# cd /opt/graphite/conf
# sed -i -- "s|default_graph_width = 400|default_graph_width = 500|g" ./dashboard.conf
# sed -i -- "s|default_graph_height = 250|default_graph_height = 400|g" ./dashboard.conf
# sed -i -- "s|fontSize = 10|fontSize = 14|g" ./graphTemplates.conf

接下來產生graphite資料庫需要使用的資料表
# /opt/graphite/bin/python /opt/graphite/webapp/graphite/manage.py syncdb

終端機問你
You just installed Django's auth system, which means you don't have any superusers defined.
Would you like to create one now? (yes/no): 
輸入yes之後按Enter，然後我設定了一個超級使用者admin密碼也是admin
完成之後，稍早之前的graphite資料庫裡會產生許多django需要用到的資料表

修改這兩個目錄的擁有人
# chown -R www-data:www-data /opt/graphite/webapp/ /opt/graphite/storage/

把這行寫到dist-packages.pth
# echo "/usr/lib/python2.7/dist-packages" > /opt/graphite/lib/python2.7/site-packages/dist-packages.pth

從這裡clone一個carbon-cache的init script，並將carbon-cache設定為開機後自動啟動的服務
# cd /tmp
# git clone https://gist.github.com/1492384.git
# cd ./1492384/
# cp ./gistfile1.sh /etc/init.d/carbon-cache
# chmod 755 /etc/init.d/carbon-cache
# chown root:root /etc/init.d/carbon-cache
# update-rc.d carbon-cache defaults

啟動所有服務
# service carbon-cache start
# service nginx restart

啟動uwsgi之前請先修改
# vi /opt/graphite/conf/wsgi.py

在第9行
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'graphite.settings')  # noqa
的下面加上這一行
sys.path.append('/opt/graphite/webapp')
不然你會在/var/log/uwsgi/app/graphite.log看到
Mon Nov 23 15:52:16 2015 - *** Operational MODE: preforking ***
Traceback (most recent call last):
  File "./wsgi.py", line 13, in <module>
    from graphite.logger import log
ImportError: No module named graphite.logger
Mon Nov 23 15:52:16 2015 - unable to load app 0 (mountpoint='') (callable not found or import error)
Mon Nov 23 15:52:16 2015 - *** no app loaded. going in full dynamic mode ***

這個bug可以在這裡查閱到詳細訊息
https://github.com/graphite-project/graphite-web/issues/1388

搜尋關鍵字
"ImportError: No module named graphite.logger"

# service uwsgi start

如果順利的話，可以在
http://localhost:9222
看到graphite-web的操作畫面

餵它吃metrics
確認你的
/usr/local/icinga2/etc/icinga2/features-available/graphite.conf

內容如下
library "perfdata"

object GraphiteWriter "graphite" {
  host = "127.0.0.1"
  port = 2003
}

啟動Icinga2的GraphiteWriter功能
# icinga2 feature enable graphite
# service icinga2 restart


問題：進去graphite-web之後，可以看到metrics的名稱，但是畫不出圖
搜尋關鍵字：graphite-web broken image
參考資料
http://kinoshita.eti.br/2013/04/17/graphite-broken-images.html
http://mirabedini.com/blog/?p=530
https://answers.launchpad.net/graphite/+question/208654
https://github.com/graphite-project/graphite-web/issues/1019
http://www.franklinangulo.com/blog/2014/5/17/graphite-series-4-graphite-webapp

試著
# cd /opt/graphite/webapp/graphite
# vi ./local_settings.py

把原來的這一行
#REMOTE_RENDERING = True

改成
REMOTE_RENDERING = False

重啟nginx和uwsgi服務
# service uwsgi restart
# service nginx restart

沒有用
然後剛才上面最後一個link講我pytz沒有安裝，那就裝吧
# /opt/graphite/bin/easy_install --upgrade pytz

pytz安裝完成之後，把左邊panel的樹狀結構點開，開始有圖出現

搜尋關鍵字
Dashboards for Graphite



自訂你的Dashboard
瀏覽器打開
http://localhost:9222

按下右上角的Dashboard，或是直接連
http://localhost:9222/dashboard/

在下面的Dashboard > Edit Dashboard貼上這一段文字

[
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Connections.value"
    ],
    "title": "MySQL Connections.value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Open_files.value"
    ],
    "title": "MySQL Open_files value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Open_tables.value"
    ],
    "title": "MySQL Open_tables value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Queries.value"
    ],
    "title": "MySQL Queries value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Questions.value"
    ],
    "title": "MySQL Questions value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Table_locks_waited.value"
    ],
    "title": "MySQL Table_locks_waited value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Threads_connected.value"
    ],
    "title": "MySQL Threads_connected value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Threads_running.value"
    ],
    "title": "MySQL Threads_running value"
  },
  {
    "target": [
      "icinga2.localhost.services.mysql.mysql.perfdata.Uptime.value"
    ],
    "title": "MySQL Uptime value"
  }
]

按下對話框下方的[ Update (doesn't save) ]，這不會存為Dashboard，只是更新畫面而已
然後可以看到這個Dashboard裡，出現了localhost這台主機的mysql服務的各項指標的圖表
確定要這個Dashboard存檔，就執行Dashboard > Save As
跳出來了一個Save Dashboard對話框，輸入你為這個Dashboard取的名字，例如Ann-MySQL-statistical
按下OK就存入這個Dashboard，稍後要叫出它，可以在Dashboard > Finder把它找出來
其它的Service像是SSH或是Disk如果要搞一個Dashboard，也是照這上面的寫法，不再重複寫一次了
如果要查閱更久以前的資料，可以按下[ Relative Time Range ]設定你要的時間區段

上面Dashboard定義更好的一個寫法也許會是
[
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Connections.value,1)"
    ],
    "title": "MySQL Connections.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Open_files.value,1)"
    ],
    "title": "MySQL Open_files value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Open_tables.value,1)"
    ],
    "title": "MySQL Open_tables value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Queries.value,1)"
    ],
    "title": "MySQL Queries value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Questions.value,1)"
    ],
    "title": "MySQL Questions value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Table_locks_waited.value,1)"
    ],
    "title": "MySQL Table_locks_waited value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Threads_connected.value,1)"
    ],
    "title": "MySQL Threads_connected value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Threads_running.value,1)"
    ],
    "title": "MySQL Threads_running value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.mysql.mysql.perfdata.Uptime.value,1)"
    ],
    "title": "MySQL Uptime value"
  }
]

這樣一次可以應用到多台主機都有安裝mysql服務的情況

我還想監測ReqPerSec所以我使用了關鍵字
Icinga2 ReqPerSec

找到這個
https://github.com/Icinga/icinga2/blob/master/itl/plugins-contrib.d/web.conf

可是它就是已經存在我Icinga2的安裝目錄
在這裡
/usr/local/icinga2/share/icinga2/include/plugins-contrib.d/web.conf

關鍵字
icinga2 nginx_status services.conf

又搜到 (Monitoring remote systems with Icinga 2)這個以後再看
http://www.olindata.com/blog/2015/03/monitoring-remote-systems-icinga-2

搜到關於nginx需要有一個/status的配置
而且nginx需要重新編譯，指定--with-http_stub_status_module
https://support.serverdensity.com/hc/en-us/articles/201253373-nginx-monitoring-Linux-Mac-and-FreeBSD

重新編譯nginx，我寫了一個Shell script
# cd /root
# touch ./nginx_install_part1.sh
# chmod 755 ./nginx_install_part1.sh

內容如下
#!/bin/sh
cd /usr/local/src
wget http://nginx.org/download/nginx-1.9.7.tar.gz
tar -zxvf ./nginx-1.9.7.tar.gz
chown -R root:root ./nginx-1.9.7
cd ./nginx-1.9.7
./configure --prefix=/usr/local/nginx-1.9.7 \
 --user=www-data \
 --group=www-data \
 --with-http_ssl_module \
 --with-pcre=/usr/local/src/pcre-8.37 \
 --with-zlib=/usr/local/src/zlib-1.2.8 \
 --with-openssl=/usr/local/src/openssl-1.0.2d \
 --with-http_stub_status_module

make
make install

chown -R root:www-data /usr/local/nginx-1.9.7
chmod -R g+w /usr/local/nginx-1.9.7

執行它的時候就
# ./nginx_install_part1.sh 2>&1 | tee /tmp/nginx_install_output

參考資料
http://stackoverflow.com/questions/6674327/redirect-all-output-to-file

剛才nginx_install_part1.sh只是把nginx-1.9.7編譯完並安裝到/usr/local
現在下面的動作要把舊的設定還有網站根目錄從1.9.5舊版本的目錄拷貝過去
產生第二個Shell Script
# cd /root
# touch ./nginx_restore_old_settings_and_files.sh
# chmod 755 ./nginx_restore_old_settings_and_files.sh

內容如下
#!/bin/sh
OLD_VERSION_NUM=1.9.5
NEW_VERSION_NUM=1.9.7

# stop nginx service first
echo "ready to stop nginx service ......"
service nginx status
service nginx stop
service nginx status
echo "done.\n"

# override configuration file with old one
echo "coping nginx.conf from /usr/local/$OLD_VERSION_NUM/conf/nginx.conf ......"
cd /usr/local/nginx-$NEW_VERSION_NUM/conf/
cp -fp /usr/local/nginx-$OLD_VERSION_NUM/conf/nginx.conf .
echo "done.\n"

# copy all of the config of virtualhost
echo "copying *.conf from /usr/local/$OLD_VERSION_NUM/conf/vhosts/ ......"
mkdir vhosts
cd ./vhosts
cp -fp /usr/local/nginx-$OLD_VERSION_NUM/conf/vhosts/*.conf .
echo "done.\n"

# test if any syntax error appear in nginx.conf ?
echo "nginx configuration syntax test ......"
cd /usr/local/nginx-$NEW_VERSION_NUM/
sbin/nginx -t -c conf/nginx.conf
echo "done.\n"

# copy root directories of websites from old installation path
cd /usr/local/nginx-$NEW_VERSION_NUM/
echo "copying whole phpMyAdmin dir ......"
cp -rp /usr/local/nginx-$OLD_VERSION_NUM/phpMyAdmin-4.5.0.2/ .
ln -s ./phpMyAdmin-4.5.0.2 ./phpmyadmin
echo "done.\n"

echo "copying whole icingaweb2 dir ......"
cp -rp /usr/local/nginx-$OLD_VERSION_NUM/icingaweb2/ .
echo "done.\n"

echo "copying whole zabbix dir ......"
cp -rp /usr/local/nginx-$OLD_VERSION_NUM/zabbix/ .
echo "done.\n"

# copy ssl directory from old installation path
sleep 1
echo "coping whole ssl dir ......"
cp -rp /usr/local/nginx-$OLD_VERSION_NUM/ssl/ .
echo "done.\n"

剛才新編譯的nginx-1.9.7真的有支援with-http_stub_status_module嗎？這樣檢查
# cd /usr/local/nginx-1.9.7
# sbin/nginx -V 2>&1 | grep -o with-http_stub_status_module
如果終端機有回應這個
with-http_stub_status_module
就表示安裝成功了

刪除舊的指向1.9.5的Symbolic Link，改指向1.9.7
# cd /usr/local
# rm -rf ./nginx
# ln -s ./nginx-1.9.7 ./nginx

接著就啟動nginx服務器
# service nginx start

剛才完成了nginx-1.9.7的昇級(因為要支援with-http_stub_status_module)
為了使用Icinga2的nginx_status
(把/usr/local/icinga2/share/icinga2/include/plugins-contrib.d/web.conf這個檔打開來看)

把這個區塊加到/usr/local/nginx/conf/nginx.conf裡面

location /nginx_status {
  stub_status on;
  access_log off;
  allow 127.0.0.1;
  deny all;
}

重新啟動nginx服務器
# service nginx restart

現在來作Icinga2的services.conf的設定
先找到check_nginx_status.pl
它的repo在這裡
https://github.com/regilero/check_nginx_status

拉下它，把check_nginx_status.pl複製到/usr/lib/nagios/plugins/目錄裡
# cd /tmp
# git clone https://github.com/regilero/check_nginx_status.git
# cd ./check_nginx_status/
# cp ./check_nginx_status.pl /usr/lib/nagios/plugins/
# chmod +x /usr/lib/nagios/plugins/check_nginx_status.pl

在終端機下，試著使用check_nginx_status.pl，方法是
# ./check_nginx_status.pl -H 127.0.0.1 -u /nginx_status -s localhost -t 10 -w 10000,100,200 -c 20000,200,300

終端機回應了
NGINX OK -  0.253 sec. response time, Active: 3 (Writing: 1 Reading: 0 Waiting: 2) ReqPerSec: 0.440 ConnPerSec: 0.133 ReqPerConn: 3.858|Writing=1;;;; Reading=0;;;; Waiting=2;;;; Active=3;;;; ReqPerSec=0.440000;;;; ConnPerSec=0.133333;;;; ReqPerConn=3.858068;;;;


/usr/local/icinga2/share/icinga2/include/plugins-contrib.d

臨時插入，又找到一個參考資料
https://blog.serverdensity.com/monitor-nginx/

搜尋關鍵字how to monitor nginx

這是plugins相關的
其中有一句To add the plugin, just copy it to /usr/local/nagios/libexec and chmod +x / chown nagios:nagios it.
https://www.opsview.com/resources/forums/basic-monitoring/how-do-i/nginx-http-service-check

開始設定監視nginx服務
首先修改/usr/local/icinga2/etc/icinga2/icinga2.conf
裡面有一行
//include <plugins-contrib>
把前面的注解//去掉，變成
include <plugins-contrib>

把這個區塊加到/usr/local/icinga2/etc/icinga2/conf.d/services.conf的最後面
apply Service "nginx" {
  import "generic-service"

  check_command = "nginx_status"

  vars.nginx_status_host_address = host.address
  vars.nginx_status_port = "80"
  vars.nginx_status_servername = host.name

  assign where host.name == "localhost"
}

重新啟動icinga2
# service icinga2 restart

然後一樣進入graphite web，直接到dashboard那一頁
http://127.0.0.1:9222/dashboard/

選下面的Dashboard > Edit Dashboard

把這一坨貼進去
[
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.Active.value,1)"
    ],
    "title": "Nginx Active.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.ConnPerSec.value,1)"
    ],
    "title": "Nginx ConnPerSec.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.Reading.value,1)"
    ],
    "title": "Nginx Reading.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.ReqPerConn.value,1)"
    ],
    "title": "Nginx ReqPerConn.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.ReqPerSec.value,1)"
    ],
    "title": "Nginx ReqPerSec.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.Waiting.value,1)"
    ],
    "title": "Nginx Waiting.value"
  },
  {
    "target": [
      "aliasByNode(icinga2.*.services.nginx.nginx_status.perfdata.Writing.value,1)"
    ],
    "title": "Nginx Writing.value"
  }
]

按下[ Update (doesn't save)]，就會看到圖表了，然後要記得再按Dashboard > Save as把它存起來


加入一個Service，使用CheckCommand snmp-interface
(snmp_interface定義可以在/usr/local/icinga2/share/icinga2/include/command-plugins-manubulon.conf裡面找到)
檢查的實際指令在/usr/lib/nagios/plugins/check_snmp_int.pl
修改/usr/local/icinga2/share/icinga2/include/command-plugins-manubulon.conf
在
arguments += {
這一行下面加入一個區塊
"-2" = {
                        set_if = "$snmp_v2$"
                }
然後最後面
vars.snmp_perf = true
的下面再加一行
vars.snmp_v2 = true

主機設定檔/usr/local/icinga2/etc/icinga2/conf.d/hosts.conf
在localhost區塊
object Host "localhost" {
……這裡略…
  /* Define newtork interfaces for service apply rules in `services.conf`. */
  vars.interfaces["lo"] = {
    snmp_interface = "lo"
  }

  vars.interfaces["eth0"] = {
    snmp_interface = "eth0"
  }
……這裡略…
}

服務設定檔/usr/local/icinga2/etc/icinga2/conf.d/services.conf
加入這個區塊
apply Service for (interface => config in host.vars.interfaces) {
  import "generic-service"

  check_command = "snmp-interface"

  vars += config
}

重啟icinga2服務
# service icinga2 restart

然後到graphite web
可以看到網路接口eth0和lo的指標進來了
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_in_bps
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_in_discard
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_in_error
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_out_bps
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_out_discard
icinga2.localhost.services.eth0.snmp-interface.perfdata.eth0_out_error

照例給它弄個Dashboard

